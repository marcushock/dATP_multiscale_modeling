//--------------------------------------------------------------------------------------//
//                    |                                       |                         //
//                    |          Function Name                |                         //
//                    |         lin_interp_Ca()               |                         //
//                    |                                       |                         //
//--------------------------------------------------------------------------------------//
//---------------------------------------------------------------------------------
// This function is used to linearly interpolate the calcium transient from Korte 2011, Figure 4B
//---------------------------------------------------------------------------------
// Input|
//-------
// Current time
//--------
// Output|
//---------
// Current Calcium concentration
//--------------------------------------------------------------------------%


//--------------------------------------
// functions used within this function
//--------------------------------------
#include "lin_interp_ca.h"
#include "problemDefines.h"
#include <stdio.h>
//-----------------------------------------------
// This function definition
//-----------------------------------------------

__device__ float lin_interp_ca(float current_time)

{

// set values to interpolate
    int index_t;
//    float time_vals[] = {-10, 0, 29.892345474302, 57.235433036247, 62.744113680595, 65.788911709471, 70.275982488867, 74.763053268263, 77.567472505386, 81.77410136107, 84.578520598192, 89.185780773465, 90.888463881718, 97.198407165244, 102.807245639489, 110.098735656008,  135.992873278773, 149.781267861293, 161.700049619064, 175.722145804677, 191.146451608851, 205.168547794464, 213.581805505832, 233.21274016569, 247.234836351303, 265.4635613926, 285.094496052458, 304.725430712316, 322.954155753613, 342.585090413471, 366.422653929013, 387.455798207433, 408.488942485852, 436.533134857078, 467.381746465427, 498.230358073775, 529.078969682124, 558.525371671911, 593.580612135944, 624.429223744292, 655.277835352641, 686.126446960989, 716.975058569338, 747.823670177686, 778.672281786035, 807.339678432177, 840.369505002732, 871.218116611081, 902.066728219429, 932.915339827778, 963.763951436127, 990.405934188791, 1029.3873615848, 1061.91862473542, 1088.76092314788, 1126.77081959388, 1154.77606169792, 1190.92190964306, 1218.96610201428, 1245.95863717159, 1281.01387763562, 1308.70751760221, 1339.55612921055, 1370.4047408189, 1400.20169521333, 1432.1019640356, 1463.26217778141, 1490.99476801517,2010};
  //  float cal_vals[] = {0.106152365201111 ,0.106152365201111, 0.107413763514673, 0.150583490646987, 0.237617985241119, 0.295445340655569, 0.382186373777244, 0.464201132658315, 0.539265488244379, 0.627458383387678, 0.692637720954178, 0.761612199367476, 0.81728162004462, 0.865934443109662, 0.927274510284635, 0.976028831302556, 1,0.956289685944741, 0.914123905955037, 0.872236142097134, 0.831027973228076, 0.795040329500601, 0.758434872146902, 0.69893941994165, 0.661129226016819, 0.612807374537253, 0.573885116085219, 0.530196866802324, 0.490612665179338, 0.447056804530633, 0.407104856701563, 0.373845889823236, 0.327200961043418, 0.286986910463828, 0.266599060798478, 0.256826372529135, 0.244357770254459, 0.20425604942509, 0.218409597953102, 0.205267017177092, 0.176454436245067, 0.170388629733061, 0.160952930714387, 0.154044651075713, 0.143934973555704, 0.158331903209197, 0.145282930558372, 0.119334758257017, 0.135847231539697, 0.136521210041031, 0.130960887405027, 0.1386905783422, 0.135678736914364, 0.120345726009017, 0.108406678271103, 0.1, 0.112407756993307, 0.150169274693044, 0.123734340140723, 0.100463360219666, 0.100231680109835, 0.124052607766355, 0.113268951745012, 0.105855188230338, 0.101390080659, 0.106866155982339, 0.108906813111377, 0.113437446370345, 0.113437446370345};
 
 // CURRENT CORRECT CA   
// float time_vals[] = {-10, 5.1608, 36.917, 67.055, 84.112, 110.33, 130.48, 162.01, 191.96, 216.87, 235.45, 258.98, 317.6, 354.75, 458.81, 563.88, 644.85, 710.9, 794.94, 912.55, 999.87, 1090.9, 1156, 1226.9, 1278.7, 1358.2, 1404.2, 1456.1, 1501.6, 2010 };
// float cal_vals[] = {0.1226298, 0.12262983963544, 0.119035750766087, 0.140769677001491, 0.433191518121145, 0.816870716116132, 0.895862803075103, 1, 0.8432170313424, 0.687411787896708, 0.562794927393389, 0.38342755765819, 0.329797752808987, 0.272527025428739, 0.214514488468361, 0.203622839871212, 0.130386335965491, 0.114294500295683, 0.110112359550561, 0.182495564754583, 0.156607924305144, 0.119332749852158, 0.093190270057165, 0.0758415138971, 0.060271082199881, 0.05284709902096, 0.09080505096184, 0.131023063276167, 0.04, 0.04};


// // MHATRE ET AL CA
// float time_vals[] = {0, 8.92133008921322, 12.1654501216544, 15.4095701540956, 18.6536901865368, 21.897810218978, 25.9529602595295, 30.008110300081, 35.6853203568531, 41.3625304136252, 51.905920519059, 67.3154906731548, 83.5360908353607, 103.000811030008, 115.166261151662, 135.44201135442, 158.961881589619, 187.347931873479, 218.167072181671, 247.364152473641, 283.860502838605, 331.711273317113, 379.56204379562, 443.633414436334, 505.271695052717, 563.665855636659, 626.926196269262, 695.052716950527, 766.423357664233, 837.79399837794, 902.676399026764, 961.070559610705, 998.377939983779, 1100, 1200, 1300, 1400, 1500, 1600, 1700, 1800, 1900, 2000};
// float cal_vals[] = {0, 0.123815363474078, 0.231040053575816, 0.329685655205704, 0.425114098658647, 0.518397769993629, 0.621329436910345, 0.717826787473174, 0.812172408019847, 0.891504623740783, 0.970815965767141, 1.00184906144476, 0.972825058870342, 0.903036470258247, 0.85043736913172, 0.760269966449885, 0.661509559499814, 0.556293962501277, 0.461791789245264, 0.386599522949105, 0.313520718229041, 0.240393208221626, 0.186568647275874, 0.134819279466155, 0.100238525447425, 0.0763955478148937, 0.0589660128416705, 0.0436603762918315, 0.0326303681815312, 0.0248175182481749, 0.0191772720255525, 0.0146372434546833, 0.0112600536193028, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011, 0.011};

// Aficamten normalized values: 
// Aficamten is a small-molecule cardiac myosin inhibitor designed to treat hypertrophic cardiomyopathy
// Hartman et al. 
float time_vals[] = {0.11153846153846156, 0.11153846153846156, 0.1, 0.11153846153846156, 0.11153846153846156, 0.1, 0.11153846153846156, 0.11153846153846156, 0.1, 0.11153846153846156, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.11153846153846156, 0.11153846153846156, 0.1, 0.11153846153846156, 0.21538461538461534, 0.4346153846153846, 0.6884615384615383, 0.8499999999999998, 0.9423076923076922, 0.9999999999999999, 0.9884615384615384, 0.9769230769230768, 0.9884615384615384, 0.9884615384615384, 0.9769230769230768, 0.9999999999999999, 0.9538461538461538, 0.9538461538461538, 0.9423076923076922, 0.9307692307692307, 0.9076923076923076, 0.9076923076923076, 0.8730769230769229, 0.8615384615384614, 0.8615384615384614, 0.8269230769230768, 0.8269230769230768, 0.7923076923076924, 0.7923076923076924, 0.7692307692307693, 0.7461538461538462, 0.7346153846153846, 0.7346153846153846, 0.7230769230769231, 0.7, 0.6769230769230768, 0.6769230769230768, 0.6653846153846154, 0.6423076923076922, 0.6307692307692306, 0.6192307692307691, 0.6076923076923075, 0.596153846153846, 0.5846153846153845, 0.5730769230769229, 0.5730769230769229, 0.5615384615384614, 0.5384615384615383, 0.526923076923077, 0.5153846153846154, 0.5038461538461539, 0.49230769230769234, 0.49230769230769234, 0.48076923076923084, 0.46923076923076923, 0.45769230769230773, 0.45769230769230773, 0.45769230769230773, 0.4346153846153846, 0.4346153846153846, 0.42307692307692313, 0.4115384615384615, 0.4, 0.4, 0.4, 0.4, 0.3769230769230769, 0.3769230769230769, 0.3653846153846153, 0.3653846153846153, 0.3653846153846153, 0.3538461538461538, 0.3538461538461538, 0.34230769230769226, 0.3307692307692307, 0.34230769230769226, 0.3307692307692307, 0.31923076923076915, 0.31923076923076915, 0.2961538461538462, 0.3076923076923077, 0.2961538461538462, 0.2961538461538462, 0.2961538461538462, 0.2961538461538462, 0.2961538461538462, 0.2961538461538462, 0.26153846153846155, 0.2730769230769231, 0.26153846153846155, 0.26153846153846155, 0.26153846153846155, 0.2730769230769231, 0.26153846153846155, 0.26153846153846155, 0.25, 0.25, 0.25, 0.23846153846153845, 0.23846153846153845, 0.23846153846153845, 0.23846153846153845, 0.25, 0.2269230769230769, 0.21538461538461534, 0.2269230769230769, 0.2269230769230769, 0.2269230769230769, 0.2269230769230769, 0.2269230769230769, 0.21538461538461534, 0.21538461538461534, 0.21538461538461534, 0.2038461538461538, 0.2038461538461538, 0.19230769230769226, 0.2038461538461538, 0.2038461538461538, 0.21538461538461534, 0.19230769230769226, 0.19230769230769226, 0.19230769230769226, 0.19230769230769226, 0.1807692307692307, 0.1807692307692307, 0.1807692307692307, 0.1807692307692307, 0.1807692307692307, 0.1807692307692307, 0.1692307692307693, 0.1807692307692307, 0.1692307692307693, 0.1807692307692307, 0.1692307692307693, 0.1692307692307693, 0.1807692307692307, 0.1692307692307693, 0.1692307692307693, 0.1692307692307693, 0.1692307692307693, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.15769230769230774, 0.1461538461538462, 0.15769230769230774, 0.15769230769230774, 0.1461538461538462, 0.1461538461538462, 0.15769230769230774, 0.1461538461538462, 0.1461538461538462, 0.1461538461538462, 0.1461538461538462, 0.15769230769230774, 0.1461538461538462, 0.1461538461538462, 0.13461538461538464, 0.13461538461538464, 0.1461538461538462, 0.1461538461538462, 0.1461538461538462, 0.13461538461538464, 0.1461538461538462, 0.1461538461538462, 0.13461538461538464, 0.13461538461538464, 0.1461538461538462, 0.13461538461538464, 0.13461538461538464, 0.13461538461538464, 0.1461538461538462, 0.13461538461538464, 0.1230769230769231, 0.13461538461538464, 0.1230769230769231, 0.13461538461538464, 0.1230769230769231, 0.13461538461538464, 0.13461538461538464, 0.13461538461538464, 0.13461538461538464, 0.1230769230769231, 0.13461538461538464, 0.13461538461538464, 0.1230769230769231, 0.1230769230769231, 0.13461538461538464, 0.11153846153846156, 0.1230769230769231, 0.1230769230769231, 0.11153846153846156, 0.1230769230769231, 0.1230769230769231, 0.1, 0.1230769230769231, 0.1230769230769231, 0.1230769230769231, 0.1230769230769231, 0.1230769230769231, 0.1230769230769231, 0.11153846153846156, 0.1230769230769231, 2000};
float cal_vals[] = {0.11111111111111113, 0.11111111111111113, 0.12222222222222225, 0.11111111111111113, 0.11111111111111113, 0.1, 0.11111111111111113, 0.11111111111111113, 0.1, 0.11111111111111113, 0.12222222222222225, 0.11111111111111113, 0.11111111111111113, 0.11111111111111113, 0.11111111111111113, 0.1, 0.11111111111111113, 0.11111111111111113, 0.1, 0.11111111111111113, 0.1, 0.12222222222222225, 0.2222222222222222, 0.44444444444444453, 0.6777777777777778, 0.8333333333333333, 0.9111111111111111, 0.9444444444444444, 0.9777777777777779, 0.9777777777777779, 1.0000000000000002, 0.9888888888888889, 0.9888888888888889, 0.9777777777777779, 0.9666666666666667, 0.9555555555555556, 0.9333333333333333, 0.9333333333333333, 0.9222222222222223, 0.9111111111111111, 0.8888888888888888, 0.8888888888888888, 0.8666666666666666, 0.8444444444444443, 0.8333333333333333, 0.8222222222222222, 0.8222222222222222, 0.788888888888889, 0.7444444444444446, 0.7666666666666667, 0.7444444444444446, 0.7333333333333334, 0.7111111111111111, 0.7000000000000001, 0.6888888888888889, 0.6666666666666666, 0.6444444444444445, 0.6444444444444445, 0.6333333333333333, 0.611111111111111, 0.611111111111111, 0.5777777777777777, 0.5666666666666667, 0.5777777777777777, 0.5555555555555555, 0.5333333333333335, 0.5333333333333335, 0.5111111111111113, 0.5111111111111113, 0.5111111111111113, 0.5000000000000001, 0.47777777777777786, 0.47777777777777786, 0.4666666666666668, 0.4555555555555556, 0.43333333333333335, 0.44444444444444453, 0.43333333333333335, 0.4222222222222223, 0.4111111111111112, 0.4, 0.4, 0.38888888888888895, 0.3666666666666667, 0.38888888888888895, 0.3666666666666667, 0.3666666666666667, 0.3666666666666667, 0.3555555555555555, 0.3555555555555555, 0.3333333333333333, 0.3333333333333333, 0.34444444444444444, 0.3222222222222223, 0.3222222222222223, 0.3222222222222223, 0.3111111111111112, 0.3111111111111112, 0.3111111111111112, 0.3111111111111112, 0.288888888888889, 0.288888888888889, 0.288888888888889, 0.2777777777777778, 0.288888888888889, 0.2777777777777778, 0.2777777777777778, 0.2777777777777778, 0.2666666666666667, 0.2666666666666667, 0.2666666666666667, 0.2555555555555556, 0.2555555555555556, 0.2555555555555556, 0.24444444444444446, 0.2555555555555556, 0.24444444444444446, 0.24444444444444446, 0.23333333333333334, 0.23333333333333334, 0.23333333333333334, 0.23333333333333334, 0.23333333333333334, 0.2222222222222222, 0.21111111111111108, 0.2222222222222222, 0.2222222222222222, 0.2222222222222222, 0.21111111111111108, 0.2222222222222222, 0.21111111111111108, 0.21111111111111108, 0.21111111111111108, 0.19999999999999996, 0.19999999999999996, 0.19999999999999996, 0.19999999999999996, 0.188888888888889, 0.188888888888889, 0.19999999999999996, 0.188888888888889, 0.17777777777777787, 0.188888888888889, 0.188888888888889, 0.188888888888889, 0.17777777777777787, 0.17777777777777787, 0.17777777777777787, 0.17777777777777787, 0.17777777777777787, 0.16666666666666674, 0.17777777777777787, 0.16666666666666674, 0.16666666666666674, 0.16666666666666674, 0.17777777777777787, 0.16666666666666674, 0.1555555555555556, 0.16666666666666674, 0.16666666666666674, 0.16666666666666674, 0.16666666666666674, 0.16666666666666674, 0.1555555555555556, 0.16666666666666674, 0.16666666666666674, 0.1555555555555556, 0.1555555555555556, 0.1555555555555556, 0.16666666666666674, 0.1555555555555556, 0.1555555555555556, 0.1555555555555556, 0.1555555555555556, 0.1444444444444445, 0.1555555555555556, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.13333333333333336, 0.1444444444444445, 0.1444444444444445, 0.1444444444444445, 0.13333333333333336, 0.1444444444444445, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.1444444444444445, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.12222222222222225, 0.13333333333333336, 0.13333333333333336, 0.13333333333333336, 0.12222222222222225, 0.13333333333333336, 0.13333333333333336, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.13333333333333336, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.13333333333333336, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.12222222222222225, 0.1};

bool keep_going = 1;

// set values to interpolate
    //------------------------------------
    // start time loop
    //------------------------------------
    for (int n = 0; n < 43; ++n)  // time marching ... ATP = 69, dATP = 30
    {

        if(keep_going == 1){
            if (current_time <= time_vals[n]) {
                index_t = n;    
                keep_going = 0;
            }
        }

    }
    float slope = (cal_vals[index_t] - cal_vals[index_t-1])/(time_vals[index_t] - time_vals[index_t-1]);
  float calcium =cal_vals[index_t-1] + (slope * (current_time-(time_vals[index_t-1])));


return calcium;
}
